import 'dart:io';
import 'package:golden_helpers/helper_file_comparator.dart';
import 'package:path/path.dart' as path;
import 'package:flutter/material.dart';
import 'package:flutter_test/flutter_test.dart';

void main() {
  group('$HelperGoldenFileComparator tests', () {
    testWidgets("doesn't override existing snapshot by default",
        (tester) async {
      // setup
      final originalGoldenFileComparator = goldenFileComparator;
      final baseDir = Uri.directory('test/snapshots');
      goldenFileComparator = HelperGoldenFileComparator(
          snapshotsDir: baseDir, forceUpdateGolden: false);
      // arrange
      final key = UniqueKey();
      const fileName = 'container_v1.png';
      await tester.binding.setSurfaceSize(const Size(100, 100));

      // act
      await tester.pumpWidget(Container(
        key: key,
        color: Colors.red,
        width: 100,
        height: 100,
      ));
      await expectLater(find.byKey(key), matchesGoldenFile(fileName),
          reason:
              '\x1B[31mThis test will fail if ran with `flutter test` because golden\n'
              'file generated by this test will be tore down.\n'
              'To run this test, use the '
              '`flutter test --update-goldens` command.\x1B[0m');

      // assert
      final goldenFile = File(path.join(baseDir.path, fileName));
      await expectLater(
          () async =>
              await expectLater(find.byKey(key), matchesGoldenFile(fileName)),
          prints('''\u001b[33m
WARNING: Golden file cannot be overridden.
Delete the golden file manually first, or set "forceUpdateGolden = true" in goldenGroup
if you want to regenerate a golden for this test.
file://${goldenFile.absolute.path}\u001b[0m\n'''));

      // cleanup
      addTearDown(() async {
        await goldenFile.parent.delete(recursive: true);
        goldenFileComparator = originalGoldenFileComparator;
      });
    }, skip: true);
  });

  testWidgets(
      'overrides golden file when '
      'forceUpdateGolden parameter is set to true', (tester) async {
    // setup
    final baseDir = Uri.directory('test/snapshots');
    final originalGoldenFileComparator = goldenFileComparator;
    goldenFileComparator = HelperGoldenFileComparator(
        snapshotsDir: baseDir, forceUpdateGolden: true);

    // arrange
    final key = UniqueKey();
    const fileName = 'container_v1.png';
    await tester.binding.setSurfaceSize(const Size(100, 100));

    // act
    await tester.pumpWidget(Container(
      key: key,
      color: Colors.red,
      width: 100,
      height: 100,
    ));
    await expectLater(find.byKey(key), matchesGoldenFile(fileName),
        reason:
            '\x1B[31mThis test will fail if ran with `flutter test` because golden\n'
            'file generated by this test will be tore down.\n'
            'To run this test, use the '
            '`flutter test --update-goldens` command.\x1B[0m');
    final goldenFile = File(path.join(baseDir.path, fileName));
    final fileFirstCreationTime = goldenFile.statSync().changed;
    await tester
        .runAsync(() => Future<void>.delayed(const Duration(seconds: 1)));
    await expectLater(find.byKey(key), matchesGoldenFile(fileName));
    final fileSecondCreationTime = goldenFile.statSync().changed;

    // assert
    expect(fileFirstCreationTime.isBefore(fileSecondCreationTime), isTrue);

    // cleanup
    addTearDown(() async {
      await goldenFile.parent.delete(recursive: true);
      goldenFileComparator = originalGoldenFileComparator;
    });
  }, skip: true);
}
